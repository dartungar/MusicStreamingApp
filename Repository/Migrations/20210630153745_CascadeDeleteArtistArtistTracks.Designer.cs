// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository;

namespace Repository.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20210630153745_CascadeDeleteArtistArtistTracks")]
    partial class CascadeDeleteArtistArtistTracks
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "Cyrillic_General_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PlaylistTrack", b =>
                {
                    b.Property<Guid>("PlaylistsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TracksId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PlaylistsId", "TracksId");

                    b.HasIndex("TracksId");

                    b.ToTable("PlaylistTrack");
                });

            modelBuilder.Entity("Repository.Models.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CityID");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CountryID");

                    b.Property<string>("House")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true);

                    b.Property<Guid?>("RegionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RegionID");

                    b.Property<Guid?>("StreetId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StreetID");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("RegionId");

                    b.HasIndex("StreetId");

                    b.HasIndex(new[] { "CountryId", "RegionId", "CityId", "StreetId", "House" }, "IX_Address")
                        .IsUnique()
                        .HasFilter("[RegionID] IS NOT NULL AND [StreetID] IS NOT NULL");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("Repository.Models.AddressElement", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<Guid>("AddressElementTypeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AddressElementTypeID");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AddressElementTypeId");

                    b.ToTable("AddressElement");
                });

            modelBuilder.Entity("Repository.Models.AddressElementType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("AddressElementType");

                    b.HasData(
                        new
                        {
                            Id = new Guid("46d75256-4e54-4287-8557-961475b792b6"),
                            Name = "Country"
                        },
                        new
                        {
                            Id = new Guid("da6019dc-caac-4dad-862b-b4e8e2b11e52"),
                            Name = "Region"
                        },
                        new
                        {
                            Id = new Guid("d35b1120-a076-4634-bce4-65f3f69699ab"),
                            Name = "City"
                        },
                        new
                        {
                            Id = new Guid("c916d09a-c9e6-4a12-b05e-0c8e7fdb6799"),
                            Name = "Street"
                        });
                });

            modelBuilder.Entity("Repository.Models.Album", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<Guid>("AlbumTypeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AlbumTypeID");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ImageID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AlbumTypeId");

                    b.HasIndex("ImageId");

                    b.HasIndex(new[] { "Name" }, "IX_Album_Name");

                    b.ToTable("Album");
                });

            modelBuilder.Entity("Repository.Models.AlbumType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("AlbumType");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3fa2b648-a426-4140-9ed4-3229c638a89f"),
                            Name = "Album"
                        },
                        new
                        {
                            Id = new Guid("2c2228f6-fc67-43a0-93e3-d85c60e128ee"),
                            Name = "EP"
                        },
                        new
                        {
                            Id = new Guid("b60a288a-b223-4ce8-804d-d6c86c6d62af"),
                            Name = "Single"
                        });
                });

            modelBuilder.Entity("Repository.Models.Artist", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("FacebookLink")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "IX_Artist_Name");

                    b.ToTable("Artist");
                });

            modelBuilder.Entity("Repository.Models.ArtistImage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<Guid>("ArtistId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ArtistID");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ImageID");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex(new[] { "ArtistId", "ImageId" }, "IX_ArtistImage_Artist")
                        .IsUnique();

                    b.ToTable("ArtistImage");
                });

            modelBuilder.Entity("Repository.Models.Collection", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ImageID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex(new[] { "Name" }, "IX_Collection_Name");

                    b.ToTable("Collection");
                });

            modelBuilder.Entity("Repository.Models.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("Repository.Models.Playlist", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<Guid>("AuthorUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AuthorUserID");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ImageID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("PlaylistTypeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PlaylistTypeID");

                    b.HasKey("Id");

                    b.HasIndex("PlaylistTypeId");

                    b.HasIndex(new[] { "Name", "AuthorUserId" }, "IX_Playlist")
                        .IsUnique();

                    b.HasIndex(new[] { "AuthorUserId" }, "IX_Playlist_Author");

                    b.ToTable("Playlist");
                });

            modelBuilder.Entity("Repository.Models.PlaylistCollection", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<Guid>("CollectionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CollectionID");

                    b.Property<Guid>("PlaylistId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PlaylistID");

                    b.HasKey("Id");

                    b.HasIndex("PlaylistId");

                    b.HasIndex(new[] { "CollectionId", "PlaylistId" }, "IX_PlaylistCollection")
                        .IsUnique();

                    b.ToTable("PlaylistCollection");
                });

            modelBuilder.Entity("Repository.Models.PlaylistFolder", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<Guid>("FolderId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("FolderID");

                    b.Property<Guid>("PlaylistId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PlaylistID");

                    b.HasKey("Id");

                    b.HasIndex("PlaylistId");

                    b.HasIndex(new[] { "FolderId", "PlaylistId" }, "IX_PlaylistFolder")
                        .IsUnique();

                    b.ToTable("PlaylistFolder");
                });

            modelBuilder.Entity("Repository.Models.PlaylistType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("PlaylistType");
                });

            modelBuilder.Entity("Repository.Models.Setting", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("ValueType")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Setting");
                });

            modelBuilder.Entity("Repository.Models.Track", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<Guid>("AlbumId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AlbumID");

                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AlbumId", "Name" }, "IX_Track")
                        .IsUnique();

                    b.HasIndex(new[] { "Name" }, "IX_Track_Name");

                    b.ToTable("Track");
                });

            modelBuilder.Entity("Repository.Models.TrackArtist", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<Guid>("ArtistId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ArtistID");

                    b.Property<Guid>("TrackId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TrackID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ArtistId", "TrackId" }, "IX_TrackArtist")
                        .IsUnique();

                    b.HasIndex(new[] { "TrackId" }, "IX_TrackArtist_Track");

                    b.ToTable("TrackArtist");
                });

            modelBuilder.Entity("Repository.Models.TrackPlayback", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<DateTime>("PlayedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid>("TrackId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TrackID");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId", "PlayedAt" }, "IX_TrackPlayback")
                        .IsUnique();

                    b.HasIndex(new[] { "TrackId" }, "IX_TrackPlayback_Track");

                    b.ToTable("TrackPlayback");
                });

            modelBuilder.Entity("Repository.Models.TrackUserReaction", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<bool?>("IsLike")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<Guid>("TrackId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TrackID");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.HasIndex("TrackId");

                    b.HasIndex(new[] { "UserId", "IsLike" }, "IX_TrackUserReaction_IsLike");

                    b.HasIndex(new[] { "UserId", "TrackId" }, "IX_TrackUserReaction_UserTrack")
                        .IsUnique();

                    b.ToTable("TrackUserReaction");
                });

            modelBuilder.Entity("Repository.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AddressID");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex(new[] { "Login" }, "IX_User")
                        .IsUnique();

                    b.HasIndex(new[] { "Email", "Name" }, "IX_User_EmailName");

                    b.HasIndex(new[] { "Login" }, "UQ__User__5E55825B69D58426")
                        .IsUnique();

                    b.ToTable("User");
                });

            modelBuilder.Entity("Repository.Models.UserFolder", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_UserFolder_User");

                    b.ToTable("UserFolder");
                });

            modelBuilder.Entity("Repository.Models.UserFollowing", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<Guid>("ArtistId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ArtistID");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId", "ArtistId" }, "IX_UserFollowing")
                        .IsUnique();

                    b.HasIndex(new[] { "ArtistId" }, "IX_UserFollowing_Artist");

                    b.ToTable("UserFollowing");
                });

            modelBuilder.Entity("Repository.Models.UserMediaLibrary", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<Guid>("AlbumId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AlbumID");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex(new[] { "UserId", "AlbumId" }, "IX_UserMediaLibrary")
                        .IsUnique();

                    b.ToTable("UserMediaLibrary");
                });

            modelBuilder.Entity("Repository.Models.UserPlaylist", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<Guid>("PlaylistId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PlaylistID");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.HasIndex("PlaylistId");

                    b.HasIndex(new[] { "UserId", "PlaylistId" }, "IX_UserPlaylist")
                        .IsUnique();

                    b.ToTable("UserPlaylist");
                });

            modelBuilder.Entity("Repository.Models.UserSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<Guid>("SettingId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SettingID");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserID");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("SettingId");

                    b.HasIndex(new[] { "UserId", "SettingId" }, "IX_UserSetting")
                        .IsUnique();

                    b.ToTable("UserSetting");
                });

            modelBuilder.Entity("Repository.Models.UserSubscription", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<DateTime>("DateBegin")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("datetime");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId", "DateBegin", "DateEnd" }, "IX_UserSubscription")
                        .IsUnique();

                    b.HasIndex(new[] { "DateBegin", "DateEnd" }, "IX_UserSubscription_Dates");

                    b.ToTable("UserSubscription");
                });

            modelBuilder.Entity("PlaylistTrack", b =>
                {
                    b.HasOne("Repository.Models.Playlist", null)
                        .WithMany()
                        .HasForeignKey("PlaylistsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Repository.Models.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Repository.Models.Address", b =>
                {
                    b.HasOne("Repository.Models.AddressElement", "City")
                        .WithMany("AddressCities")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_Address_AddressElement_City")
                        .IsRequired();

                    b.HasOne("Repository.Models.AddressElement", "Country")
                        .WithMany("AddressCountries")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_Address_AddressElement_Country")
                        .IsRequired();

                    b.HasOne("Repository.Models.AddressElement", "Region")
                        .WithMany("AddressRegions")
                        .HasForeignKey("RegionId")
                        .HasConstraintName("FK_Address_AddressElement_Region");

                    b.HasOne("Repository.Models.AddressElement", "Street")
                        .WithMany("AddressStreets")
                        .HasForeignKey("StreetId")
                        .HasConstraintName("FK_Address_AddressElement_Street");

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("Region");

                    b.Navigation("Street");
                });

            modelBuilder.Entity("Repository.Models.AddressElement", b =>
                {
                    b.HasOne("Repository.Models.AddressElementType", "AddressElementType")
                        .WithMany("AddressElements")
                        .HasForeignKey("AddressElementTypeId")
                        .HasConstraintName("FK_AddressElement_AddressElementType")
                        .IsRequired();

                    b.Navigation("AddressElementType");
                });

            modelBuilder.Entity("Repository.Models.Album", b =>
                {
                    b.HasOne("Repository.Models.AlbumType", "AlbumType")
                        .WithMany("Albums")
                        .HasForeignKey("AlbumTypeId")
                        .HasConstraintName("FK_Album_AlbumType")
                        .IsRequired();

                    b.HasOne("Repository.Models.Image", "Image")
                        .WithMany("Albums")
                        .HasForeignKey("ImageId")
                        .HasConstraintName("FK_Album_Image")
                        .IsRequired();

                    b.Navigation("AlbumType");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("Repository.Models.ArtistImage", b =>
                {
                    b.HasOne("Repository.Models.Artist", "Artist")
                        .WithMany("ArtistImages")
                        .HasForeignKey("ArtistId")
                        .HasConstraintName("FK_ArtistImage_Artist")
                        .IsRequired();

                    b.HasOne("Repository.Models.Image", "Image")
                        .WithMany("ArtistImages")
                        .HasForeignKey("ImageId")
                        .HasConstraintName("FK_ArtistImage_Image")
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("Repository.Models.Collection", b =>
                {
                    b.HasOne("Repository.Models.Image", "Image")
                        .WithMany("Collections")
                        .HasForeignKey("ImageId")
                        .HasConstraintName("FK_Collection_Image")
                        .IsRequired();

                    b.Navigation("Image");
                });

            modelBuilder.Entity("Repository.Models.Playlist", b =>
                {
                    b.HasOne("Repository.Models.User", "AuthorUser")
                        .WithMany("Playlists")
                        .HasForeignKey("AuthorUserId")
                        .HasConstraintName("FK_Playlist_AuthorUser")
                        .IsRequired();

                    b.HasOne("Repository.Models.Image", "Image")
                        .WithOne("Playlist")
                        .HasForeignKey("Repository.Models.Playlist", "Id")
                        .HasConstraintName("FK_Playlist_Image")
                        .IsRequired();

                    b.HasOne("Repository.Models.PlaylistType", "PlaylistType")
                        .WithMany("Playlists")
                        .HasForeignKey("PlaylistTypeId")
                        .HasConstraintName("FK_Playlist_PlaylistType")
                        .IsRequired();

                    b.Navigation("AuthorUser");

                    b.Navigation("Image");

                    b.Navigation("PlaylistType");
                });

            modelBuilder.Entity("Repository.Models.PlaylistCollection", b =>
                {
                    b.HasOne("Repository.Models.Collection", "Collection")
                        .WithMany("PlaylistCollections")
                        .HasForeignKey("CollectionId")
                        .HasConstraintName("FK_PlaylistCollection_Collection")
                        .IsRequired();

                    b.HasOne("Repository.Models.Playlist", "Playlist")
                        .WithMany("PlaylistCollections")
                        .HasForeignKey("PlaylistId")
                        .HasConstraintName("FK_PlaylistCollection_Playlist")
                        .IsRequired();

                    b.Navigation("Collection");

                    b.Navigation("Playlist");
                });

            modelBuilder.Entity("Repository.Models.PlaylistFolder", b =>
                {
                    b.HasOne("Repository.Models.UserFolder", "Folder")
                        .WithMany("PlaylistFolders")
                        .HasForeignKey("FolderId")
                        .HasConstraintName("FK_PlaylistFolder_UserFolder")
                        .IsRequired();

                    b.HasOne("Repository.Models.Playlist", "Playlist")
                        .WithMany("PlaylistFolders")
                        .HasForeignKey("PlaylistId")
                        .HasConstraintName("FK_PlaylistFolder_Playlist")
                        .IsRequired();

                    b.Navigation("Folder");

                    b.Navigation("Playlist");
                });

            modelBuilder.Entity("Repository.Models.Track", b =>
                {
                    b.HasOne("Repository.Models.Album", "Album")
                        .WithMany("Tracks")
                        .HasForeignKey("AlbumId")
                        .HasConstraintName("FK_Track_Album")
                        .IsRequired();

                    b.Navigation("Album");
                });

            modelBuilder.Entity("Repository.Models.TrackArtist", b =>
                {
                    b.HasOne("Repository.Models.Artist", "Artist")
                        .WithMany("TrackArtists")
                        .HasForeignKey("ArtistId")
                        .HasConstraintName("FK_TrackArtist_Artist")
                        .IsRequired();

                    b.HasOne("Repository.Models.Track", "Track")
                        .WithMany("TrackArtists")
                        .HasForeignKey("TrackId")
                        .HasConstraintName("FK_TrackArtist_Track")
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("Track");
                });

            modelBuilder.Entity("Repository.Models.TrackPlayback", b =>
                {
                    b.HasOne("Repository.Models.Track", "Track")
                        .WithMany("TrackPlaybacks")
                        .HasForeignKey("TrackId")
                        .HasConstraintName("FK_TrackPlayback_Track")
                        .IsRequired();

                    b.HasOne("Repository.Models.User", "User")
                        .WithMany("TrackPlaybacks")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_TrackPlayback_User")
                        .IsRequired();

                    b.Navigation("Track");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Repository.Models.TrackUserReaction", b =>
                {
                    b.HasOne("Repository.Models.Track", "Track")
                        .WithMany("TrackUserReactions")
                        .HasForeignKey("TrackId")
                        .HasConstraintName("FK_TrackUserReaction_Track")
                        .IsRequired();

                    b.HasOne("Repository.Models.User", "User")
                        .WithMany("TrackUserReactions")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_TrackUserReaction_User")
                        .IsRequired();

                    b.Navigation("Track");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Repository.Models.User", b =>
                {
                    b.HasOne("Repository.Models.Address", "Address")
                        .WithMany("Users")
                        .HasForeignKey("AddressId")
                        .HasConstraintName("FK_User_Address")
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Repository.Models.UserFolder", b =>
                {
                    b.HasOne("Repository.Models.User", "User")
                        .WithMany("UserFolders")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserFolder_User")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Repository.Models.UserFollowing", b =>
                {
                    b.HasOne("Repository.Models.Artist", "Artist")
                        .WithMany("UserFollowings")
                        .HasForeignKey("ArtistId")
                        .HasConstraintName("FK_UserFollowing_Artist")
                        .IsRequired();

                    b.HasOne("Repository.Models.User", "User")
                        .WithMany("UserFollowings")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserFollowing_User")
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Repository.Models.UserMediaLibrary", b =>
                {
                    b.HasOne("Repository.Models.Album", "Album")
                        .WithMany("UserMediaLibraries")
                        .HasForeignKey("AlbumId")
                        .HasConstraintName("FK_UserMediaLibrary_Album")
                        .IsRequired();

                    b.HasOne("Repository.Models.User", "User")
                        .WithMany("UserMediaLibraries")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserMediaLibrary_User")
                        .IsRequired();

                    b.Navigation("Album");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Repository.Models.UserPlaylist", b =>
                {
                    b.HasOne("Repository.Models.Playlist", "Playlist")
                        .WithMany("UserPlaylists")
                        .HasForeignKey("PlaylistId")
                        .HasConstraintName("FK_UserPlaylist_Playlist")
                        .IsRequired();

                    b.HasOne("Repository.Models.User", "User")
                        .WithMany("UserPlaylists")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserPlaylist_User")
                        .IsRequired();

                    b.Navigation("Playlist");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Repository.Models.UserSetting", b =>
                {
                    b.HasOne("Repository.Models.Setting", "Setting")
                        .WithMany("UserSettings")
                        .HasForeignKey("SettingId")
                        .HasConstraintName("FK_UserSetting_Setting")
                        .IsRequired();

                    b.HasOne("Repository.Models.User", "User")
                        .WithMany("UserSettings")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserSetting_User")
                        .IsRequired();

                    b.Navigation("Setting");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Repository.Models.UserSubscription", b =>
                {
                    b.HasOne("Repository.Models.User", "User")
                        .WithMany("UserSubscriptions")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserSubscription_User")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Repository.Models.Address", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Repository.Models.AddressElement", b =>
                {
                    b.Navigation("AddressCities");

                    b.Navigation("AddressCountries");

                    b.Navigation("AddressRegions");

                    b.Navigation("AddressStreets");
                });

            modelBuilder.Entity("Repository.Models.AddressElementType", b =>
                {
                    b.Navigation("AddressElements");
                });

            modelBuilder.Entity("Repository.Models.Album", b =>
                {
                    b.Navigation("Tracks");

                    b.Navigation("UserMediaLibraries");
                });

            modelBuilder.Entity("Repository.Models.AlbumType", b =>
                {
                    b.Navigation("Albums");
                });

            modelBuilder.Entity("Repository.Models.Artist", b =>
                {
                    b.Navigation("ArtistImages");

                    b.Navigation("TrackArtists");

                    b.Navigation("UserFollowings");
                });

            modelBuilder.Entity("Repository.Models.Collection", b =>
                {
                    b.Navigation("PlaylistCollections");
                });

            modelBuilder.Entity("Repository.Models.Image", b =>
                {
                    b.Navigation("Albums");

                    b.Navigation("ArtistImages");

                    b.Navigation("Collections");

                    b.Navigation("Playlist");
                });

            modelBuilder.Entity("Repository.Models.Playlist", b =>
                {
                    b.Navigation("PlaylistCollections");

                    b.Navigation("PlaylistFolders");

                    b.Navigation("UserPlaylists");
                });

            modelBuilder.Entity("Repository.Models.PlaylistType", b =>
                {
                    b.Navigation("Playlists");
                });

            modelBuilder.Entity("Repository.Models.Setting", b =>
                {
                    b.Navigation("UserSettings");
                });

            modelBuilder.Entity("Repository.Models.Track", b =>
                {
                    b.Navigation("TrackArtists");

                    b.Navigation("TrackPlaybacks");

                    b.Navigation("TrackUserReactions");
                });

            modelBuilder.Entity("Repository.Models.User", b =>
                {
                    b.Navigation("Playlists");

                    b.Navigation("TrackPlaybacks");

                    b.Navigation("TrackUserReactions");

                    b.Navigation("UserFolders");

                    b.Navigation("UserFollowings");

                    b.Navigation("UserMediaLibraries");

                    b.Navigation("UserPlaylists");

                    b.Navigation("UserSettings");

                    b.Navigation("UserSubscriptions");
                });

            modelBuilder.Entity("Repository.Models.UserFolder", b =>
                {
                    b.Navigation("PlaylistFolders");
                });
#pragma warning restore 612, 618
        }
    }
}
